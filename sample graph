# Literature review are usually summarized by a comparison table including several variables. 
# This script explore the interrelationship between different variables that might affect the overall results

# %load ../standard_import.txt
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
%matplotlib inline
plt.style.use('seaborn-white')

# load dataset
# from comparison table which summarized  the targeted variables in different literature 
df1 = pd.read_excel(r"C:\\Table.xlsx", sheet_name="RateC
onstantsandD90", keep_default_na=False, na_values=['_'])
df2 = pd.read_excel(r"C:\\Table.xlsx", sheet_name="Predi
ctedUVRateConstantsand", keep_default_na=False, na_values=['_'])
df1.head()

#generate comparison graph 
sns.set(style="ticks", color_codes=True)
g = sns.pairplot(df2[["Genome bp", "Dimer Prob Dv", "UV k m^2/J"]])
g.axes[2,0].set_xlim((0,350000))
g.axes[2,1].set_xlim((0,1))
g.axes[2,2].set_xlim((0,0.2))
g.axes[0,0].set_ylim((0,350000))
g.axes[1,0].set_ylim((0,1))
g.axes[2,0].set_ylim((0,0.2))

#pairplot for the interrelationship 
g= sns.pairplot(df1[["Genome bp", "D90 J/m^2", "UVGI k m^2/J", "Avg k m^2/J"
]])
g.axes[3,0].set_xlim((0,250000))
g.axes[3,1].set_xlim((0,1600))
g.axes[3,2].set_xlim((0,0.5))
g.axes[3,3].set_xlim((0,0.2))
g.axes[0,3].set_xlim((0,250000))
g.axes[1,3].set_xlim((0,1600))
g.axes[2,3].set_xlim((0,0.5))
g.axes[3,3].set_xlim((0,0.2))
g.axes[0,0].set_ylim((0,250000))
g.axes[1,0].set_ylim((0,1600))
g.axes[2,0].set_ylim((0,0.5))
g.axes[3,0].set_ylim((0,0.2))


#regression plot 
sns.regplot(df1["Genome bp"], df1["D90 J/m^2"], ci=None, scatter_kws={'color':
'r', 's':9})

df2.head()

#multi-dimentional plot
plt.figure(figsize=(8,6))
d= sns.scatterplot(data=df2, x="Dimer Prob Dv", y="UV k m^2/J", hue="Genome b
p", size="Genome bp")
d.axes.set_xlim((0,1))
d.axes.set_ylim((0,0.18))

# pair plot - scatter 
g= sns.pairplot(df1[["Genome bp", "D90 J/m^2", "UVGI k m^2/J", "Avg k m^2/J"
]], hue = "Genome bp", palette = "Blues", diag_kind=None)
g.axes[3,0].set_xlim((0,250000))
g.axes[3,1].set_xlim((0,1600))
g.axes[3,2].set_xlim((0,0.5))
g.axes[3,3].set_xlim((0,0.2))
g.axes[0,3].set_xlim((0,250000))
g.axes[1,3].set_xlim((0,1600))
g.axes[2,3].set_xlim((0,0.5))
g.axes[3,3].set_xlim((0,0.2))
g.axes[0,0].set_ylim((0,250000))
g.axes[1,0].set_ylim((0,1600))
g.axes[2,0].set_ylim((0,0.5))
g.axes[3,0].set_ylim((0,0.2))

#heatmap 
df3 = df2.pivot( "Dimer Prob Dv", "UV k m^2/J", "Genome bp")
ax = sns.heatmap(df3)

df3 = df2.pivot( "Dimer Prob Dv", "Genome bp", "UV k m^2/J")
ax = sns.heatmap(df3)

#regression plot 
fig, axs = plt.subplots(ncols=3, figsize=(20,12))
  sns.regplot(x="Avg k m^2/J",y="Genome bp", data=df1, ax=axs[0])
  sns.regplot(x="UVGI k m^2/J", y="Genome bp", data=df1, ax=axs[1])
  sns.regplot(x="D90 J/m^2", y="Genome bp", data=df1, ax=axs[2])
  axs[0].set_xlim((0,0.2))
  axs[1].set_xlim((0,0.5))
  axs[2].set_xlim((0,1600))
  axs[0].set_ylim((0,250000))
  axs[1].set_ylim((0,250000))
  axs[2].set_ylim((0,250000))
plt.show()


# some 3D plot 
# importing mplot3d toolkits
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt


fig = plt.figure(figsize=(15,15))

# syntax for 3-D projection
ax = plt.axes(projection ='3d')

# defining axes
z = df2["Genome bp"]
x = df2["Dimer Prob Dv"]
y = df2["UV k m^2/J"]
ax.scatter(x, y, z, cmap='Greens')
ax.set_xlabel("Dimer Prob Dv", size= 16)
ax.set_ylabel('UV k m^2/J', size= 16)
ax.set_zlabel('Genome bp', size= 16);

# syntax for plotting
plt.show()


